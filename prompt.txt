You are to build a highly advanced Telegram bot named JARVIS, designed exclusively for the developer (for now), with the following capabilities, rules, and constraints:

---

🧩 PROJECT PURPOSE:
JARVIS is a private AI-powered assistant integrated into a Telegram bot. It acts like an intelligent developer companion (Jarvis-style), capable of:
- Understanding natural language prompts
- Reading uploaded `.txt` plans
- Generating, modifying, and managing code projects (specifically Telegram bots or utility tools)
- Performing internal file operations (create, read, edit, delete, move files/folders)
- Operating in two modes: "dev-only" and "everyone"

---

🎯 FUNCTIONAL SCOPE:

1. ✅ **Chat Interface**:
   - Accepts commands and free-text prompts from the dev via Telegram.

2. ✅ **AI-Powered Code Generation**:
   - Uses Gemini (or GPT) to generate or modify codebases based on user input or uploaded `.txt` plans.

3. ✅ **File System Control**:
   - JARVIS can:
     - Create new folders (e.g., `/bots/my_game_bot/`)
     - Create/edit/delete files (e.g., `main.py`, `handlers/`, etc.)
     - Update existing codebases
     - Inject new handlers, utils, features on request

4. ✅ **Plan File Support**:
   - Accepts uploaded `.txt` or `.md` files that contain feature plans
   - Parses and builds bots based on these plans

5. ✅ **Internal Build-Only Mode**:
   - Never sends code back in the chat
   - All code is silently written to disk
   - Confirms actions like: “✅ Project built in /bots/xyz_bot”

6. ✅ **Retry System (Max 5 Attempts)**:
   - For any operation (build/edit), JARVIS gets up to 5 attempts
   - On failure, it:
     - Explains the error using Gemini in human terms
     - Tries again with adjusted prompt/logic
   - On success: confirms ✅
   - On full failure: replies with “❌ All 5 attempts failed. Reason: …”

7. ✅ **Access Control System**:
   - Default mode is `"dev-only"` (only the dev's Telegram user ID is allowed)
   - Can be toggled using:
     - "Jarvis, switch to public mode" → sets `access_mode = "everyone"`
     - "Jarvis, switch back to dev mode" → sets `access_mode = "dev"`

8. ✅ **Persistent Config**:
   - Settings like `access_mode`, allowed user IDs, etc., are stored in a JSON file (e.g., `config/settings.json`)

9. ✅ **Silent Logger**:
   - Logs all actions (success/failure) and errors internally (e.g., `logs/errors.log`)

---

🧠 INTELLIGENT ERROR HANDLING:
- All errors (e.g., JSON parsing errors, file permission errors, invalid code) are:
  - Caught and logged
  - Sent to Gemini with a follow-up prompt: “Explain this error simply”
  - Human-friendly error summaries are sent to the user
  - Auto-retries until max 5 attempts

---

👮‍♂️ PERMISSIONS & SECURITY:

- Access to JARVIS is restricted to the dev (via Telegram user ID)
- File operations are restricted to safe base paths like:
  - `/bots/`
  - `/shared/`
  - `/config/`
- No shell command execution
- Optional: all user requests and file changes are logged

---

🛠️ CODE STRUCTURE (TO BE GENERATED BY JARVIS):

jarvis_bot/
├── main.py # Telegram bot entrypoint
├── jarvis_engine.py # Talks to Gemini or GPT
├── file_manager.py # Create, update, delete files
├── parser.py # Parses uploaded plan.txt files
├── error_handler.py # AI-powered error explainer
├── config/
│ └── settings.json # Stores access_mode and allowed user_ids
├── logs/
│ └── errors.log # Tracks retries/errors
├── bots/ # Where generated bots are created
│ └── my_game_bot/
│ ├── main.py
│ ├── handlers/
│ └── db/


---

📦 INCLUDED FEATURES:
- Silent build mode ✅
- Retry system with AI explanations ✅
- Access mode switch (dev/public) ✅
- Logger and error tracking ✅
- No code replies in chat ✅
- Plan parsing from uploaded `.txt` ✅
- Role-safe bot creation (no self-token handling) ✅

---

🛡️ FUTURE UPGRADE PLAN (optional, not required now):
- Add multi-user roles (dev, contributor, viewer)
- GUI panel or Web UI (Flask + Auth)
- Project cloning and forking
- Versioning and rollback (via git or snapshots)

---

⚠️ RESTRICTIONS:
- JARVIS must not reply with raw code blocks
- JARVIS must not perform actions outside allowed folders
- JARVIS must only obey authenticated commands

---

🔚 END OF SPEC
